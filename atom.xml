<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bingoxin&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.bingoxin.top/"/>
  <updated>2018-12-08T17:04:28.016Z</updated>
  <id>http://www.bingoxin.top/</id>
  
  <author>
    <name>bingoxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.bingoxin.top/2018/12/08/hello-world/"/>
    <id>http://www.bingoxin.top/2018/12/08/hello-world/</id>
    <published>2018-12-08T07:49:47.515Z</published>
    <updated>2018-12-08T17:04:28.016Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><a id="more"></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言-操作符</title>
    <link href="http://www.bingoxin.top/2017/11/12/C%E8%AF%AD%E8%A8%80-%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://www.bingoxin.top/2017/11/12/C语言-操作符/</id>
    <published>2017-11-12T10:08:58.000Z</published>
    <updated>2018-12-09T10:11:44.674Z</updated>
    
    <content type="html"><![CDATA[<p>对于刚接触C语言的人来说，一提到操作符，可能也只有==、+、-、*等等。今天就来了解一下操作符的知识。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>操作符包括算术操作符、移位操作符、位操作符、赋值、单目操作符。关系操作符、逻辑操作符、条件操作符。逗号操作符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">算术操作符有：加（+）、减（-）、乘（*）、除（/）、取模（%）。</span><br></pre></td></tr></table></figure><p>在这些操作符中，需要注意的是除（/）和取模（%）的使用：</p><p>1、 浮点数相除是浮点数，整数相除是整数，浮点数除以整数为浮点数。</p><p>2、 取模（%）两边都应为整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">移位操作符有：左移（&lt;&lt;）和右移（&gt;&gt;）。</span><br></pre></td></tr></table></figure><p>在说这些之前，我们应该了解什么是源码、反码和补码。</p><p>电脑一般都是32位的，则在编程软件中，数字的二进制也是32位。正数在电脑中以源码保存，负数在电脑中以补码保存。正数的源码最高位是0，负数的源码最高位是1。正数的源码、反码、补码都相同。负数的反码是在符号位不变的基础上，其他位取反。其补码为反码+1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例如：1源码为0000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line"></span><br><span class="line">      1反码为0000 00000000 0000 0000 0000 0000 0001</span><br><span class="line"></span><br><span class="line">      1补码为0000 00000000 0000 0000 0000 0000 0001</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">     -1源码为1000 00000000 0000 0000 0000 0000 0001</span><br><span class="line"></span><br><span class="line">     -1反码为1111 11111111 1111 1111 1111 1111 1110</span><br><span class="line"></span><br><span class="line">     -1补码是1111 11111111 1111 1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>接下来再说左移（&lt;&lt;），末位补0，最高位溢出。</p><p>例如：a=1,a&lt;&lt;2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a：00000000 0000 0000 0000 0000 0000 000100</span><br><span class="line"></span><br><span class="line">  溢出                                    补0</span><br><span class="line"></span><br><span class="line">则a&lt;&lt;2：0000 0000 0000 0000 0000 0000 0000 0100</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  int a = 1;</span><br><span class="line"></span><br><span class="line">  printf(&quot;a=%d\n&quot;,a);</span><br><span class="line"></span><br><span class="line">  a = a &lt;&lt; 2;</span><br><span class="line"></span><br><span class="line">  printf(&quot;a&lt;&lt;2=%d\n&quot;,a);</span><br><span class="line"></span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右移（&gt;&gt;）分为逻辑右移和算术右移。逻辑右移是左边补0，右边舍弃。算术右移是最高位补符号位，右边舍弃。经常使用的是算术右移。</p><p>例如：a=1，a&gt;&gt;2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a: 000000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line"></span><br><span class="line">补符号位                                   舍弃</span><br><span class="line"></span><br><span class="line">a&lt;&lt;2: 0000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  int a = 1;</span><br><span class="line"></span><br><span class="line">  printf(&quot;a=%d\n&quot;,a);</span><br><span class="line"></span><br><span class="line">  a = a &gt;&gt; 2;</span><br><span class="line"></span><br><span class="line">  printf(&quot;a&gt;&gt;2=%d\n&quot;,a);</span><br><span class="line"></span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">位操作符有三种，分别是：与（&amp;）、或（|），异或（^）的原则进行计算。</span><br></pre></td></tr></table></figure><p>与（&amp;）就是两个数的补码，每位进行比较，按照有0则为0，同为1则是1的原则进行计算。</p><p>异或（^）就是两个数的补码，每位进行比较，按照相同为0，不同为1的原则进行计算。</p><p>先看下面这段例程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int a = 3;</span><br><span class="line"></span><br><span class="line">    int b = 5;</span><br><span class="line"></span><br><span class="line">    printf(&quot;a&amp;b=%d\n&quot;,a&amp;b);</span><br><span class="line"></span><br><span class="line">    printf(&quot;a|b=%d\n&quot;,a|b);</span><br><span class="line"></span><br><span class="line">    printf(&quot;a^b=%d\n&quot;,a^b);</span><br><span class="line"></span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a的补码是:0000 0000 0000 00000000 0000 0000 0011</p><p>b的补码是:0000 0000 0000 0000 0000 0000 0000 0101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">则    a&amp;b=0000 0000 0000 0000 0000 0000 00000001=1</span><br><span class="line"></span><br><span class="line">      a|b=0000 0000 0000 0000 0000 0000 0000 0111=7</span><br><span class="line"></span><br><span class="line">      a^b=0000 0000 0000 0000 0000 0000 0000 0110=6</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">赋值中包括就是我们常见的=，还包括复合赋值操作符有+=、-=、*=、/=、%=、&lt;&lt;=、&gt;&gt;=、&amp;=、^=、|=。</span><br></pre></td></tr></table></figure><p>a+=2表示a=a+2，即操作符两边的数先进行计算再将计算结果赋值到操作数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关系操作符有!=、&lt;=、&gt;=、==、&lt;、&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单目操作符有！、-、+、&amp;、sizeof、~、++、--、*。</span><br></pre></td></tr></table></figure><p>！表示非，例如！（2=2），2=2为真，则！（2=2）为假。</p><p>-表示操作数的负值，-1也就是我们所说的负数。</p><p>+表示操作数的正值，一般被省略。</p><p>&amp;表示操作数的地址，例如：</p><p>int a = 10;</p><p>int* b = &a;</p><p>sizeof用于计算该操作数或表达式的字节数，初学者会认为这是一个函数，这是一个误区。</p><p>~用于整型求补操作，即将该操作数的二进制进行转换，1变为0,0变为1。</p><p>++用于操作数的自加，每次加1，++a表示先自加在使用该操作数，a++表示先使用该操作数再进行自加。</p><p><em>表示间接访问操作符，在指针中使用。</em>a表示访问a指向的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">逻辑操作符有&amp;&amp;（和）和||（或）</span><br></pre></td></tr></table></figure><p>在这里需要注意的是要和位操作符进行区分：</p><p>和即所有条件为真且为真，一个条件为假就是假</p><p>或即一个为真即为真，全部为假才是假。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件操作符包括三个部分：a？b : c</span><br></pre></td></tr></table></figure><p>a为一个判断条件，若a为真则执行b语句，若a为假则执行c语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">逗号操作符使用很频繁，逗号操作符把多个表达式分隔开，表达式从左往右依次计算。</span><br></pre></td></tr></table></figure><h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><p>　　可能关于操作符的叙述不是很详细，欢迎交流！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于刚接触C语言的人来说，一提到操作符，可能也只有==、+、-、*等等。今天就来了解一下操作符的知识。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;操作符包括算术操作符、
      
    
    </summary>
    
    
      <category term="C/C++" scheme="http://www.bingoxin.top/tags/C-C/"/>
    
  </entry>
  
</feed>
